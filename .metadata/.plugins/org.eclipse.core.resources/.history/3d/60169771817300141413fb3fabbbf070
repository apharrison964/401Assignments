package a8;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.*;

import comp401.sushi.*;

@SuppressWarnings("serial")
public class SushiWorkstationWidget extends JPanel implements ActionListener  {

	Avocado avocado;
	Crab crab;
	Eel eel;
	Rice rice;
	Salmon salmon;
	Seaweed seaweed;
	Shrimp shrimp;
	Tuna tuna;
	Roll roll;
	Sashimi sashimi;
	Nigiri nigiri;
	JPanel topLevel, gridLay, sushiButtons, sash, nigi;
	JSlider goldAmount, avocadoSlider, crabSlider, eelSlider, 
	riceSlider, salmonSlider, shrimpSlider, tunaSlider;
	JButton makeRoll, sashimiButton, nigiriButton;
	String[] type = {"Crab", "Eel", "Salmon", "Shrimp", "Tuna"};
	String[] choosePlate = {"Red Plate", "Blue Plate", "Green Plate", "Gold Plate"};
	JComboBox<String> coloredPlates, sashimiType, nigiriType;
	ArrayList<Ingredient> ingreList;
	JSlider slider;

	/* Do not change the following line. */
	private List<WorkstationListener> listeners;

	public SushiWorkstationWidget() {
		/* Do not change the following line*/
		listeners = new ArrayList<WorkstationListener>();

		/* Replace the following line with your own code. */
		topLevel = new JPanel();
		topLevel.setLayout(new BorderLayout());
		add(topLevel);

		gridLay = new JPanel();
		gridLay.setLayout(new GridLayout(0, 2));

		gridLay.add(new JLabel("Plate Color: "));
		coloredPlates = new JComboBox<String>(choosePlate);
		coloredPlates.setVisible(true);
		gridLay.add(coloredPlates);

		gridLay.add(new JLabel("Gold Price: "));
		goldAmount = new JSlider(5, 15);
		goldAmount.setMajorTickSpacing(1);
		goldAmount.setPaintTicks(true);
		goldAmount.setPaintLabels(true);
		gridLay.add(goldAmount);

		gridLay.add(new JLabel("Avocado: "));
		avocadoSlider = new JSlider(0, 100);
		gridLay.add(avocadoSlider);

		gridLay.add(new JLabel("Crab: "));
		crabSlider = new JSlider(0, 100);
		gridLay.add(crabSlider);

		gridLay.add(new JLabel("Eel: "));
		eelSlider = new JSlider(0, 100);
		gridLay.add(eelSlider);

		gridLay.add(new JLabel("Rice: "));
		riceSlider = new JSlider(0, 100);
		gridLay.add(riceSlider);

		gridLay.add(new JLabel("Salmon: "));
		salmonSlider = new JSlider(0, 100);
		gridLay.add(salmonSlider);

		gridLay.add(new JLabel("Shrimp: "));
		shrimpSlider = new JSlider(0, 100);
		gridLay.add(shrimpSlider);

		gridLay.add(new JLabel("Tuna: "));
		tunaSlider = new JSlider(0, 100);
		gridLay.add(tunaSlider);

		topLevel.add(gridLay, BorderLayout.NORTH);

		makeRoll = new JButton("Make Roll");
		makeRoll.setActionCommand("Make Roll");
		topLevel.add(makeRoll);

		sushiButtons = new JPanel();
		sushiButtons.setLayout(new BorderLayout());
		topLevel.add(sushiButtons, BorderLayout.SOUTH);

		sash = new JPanel();
		sash.setLayout(new BorderLayout());
		sash.add(new JLabel("Sashimi Type: "), BorderLayout.WEST);
		sushiButtons.add(sash, BorderLayout.NORTH);

		sashimiType = new JComboBox<String>(type);
		sash.add(sashimiType, BorderLayout.CENTER);
		sashimiButton = new JButton("Make Sashimi");
		sash.add(sashimiButton, BorderLayout.EAST);

		nigi = new JPanel();
		nigi.setLayout(new BorderLayout());
		nigi.add(new JLabel("Nigiri Type: "), BorderLayout.WEST);
		sushiButtons.add(nigi, BorderLayout.SOUTH);

		nigiriType = new JComboBox<String>(type);
		nigi.add(nigiriType, BorderLayout.CENTER);
		nigiriButton = new JButton("Make Nigiri");
		nigi.add(nigiriButton, BorderLayout.EAST);

		makeRoll.addActionListener(this);
		nigiriButton.addActionListener(this);
		sashimiButton.addActionListener(this);
		coloredPlates.addActionListener(this);
	}

	/* Do not change the following three methods:
	 * addWorkstationListener
	 * removeWorkstationListener
	 * publicPlateToListeners
	 */

	public void addWorkstationListener(WorkstationListener l) {
		listeners.add(l);
	}

	public void removeWorkstationListener(WorkstationListener l) {
		listeners.remove(l);
	}

	private void publishPlateToListeners(Plate p) {
		for (WorkstationListener l : listeners) {
			l.handleMadePlate(p);
		}
	}

	public JSlider getSliderValue(JSlider slider){
		this.slider = slider;
		if((double) slider.getValue() / 100.0 != 0){
			if(slider == avocadoSlider){
				avocado = new Avocado((double) avocadoSlider.getValue() / 100.0);	
				ingreList.add(avocado);
			}
			if(slider == crabSlider){
				crab = new Crab((double) crabSlider.getValue() / 100.0);
				ingreList.add(crab);
			}
			if(slider == eelSlider){
				eel = new Eel((double) eelSlider.getValue() / 100.0);
				ingreList.add(eel);
			}
			if(slider == riceSlider){
				rice = new Rice((double) riceSlider.getValue() / 100.0);
				ingreList.add(rice);
			}
			if(slider == salmonSlider){
				salmon = new Salmon((double) salmonSlider.getValue() / 100.0);
				ingreList.add(salmon);
			}
			if(slider == shrimpSlider){
				shrimp = new Shrimp((double) shrimpSlider.getValue() / 100.0);
				ingreList.add(shrimp);
			}
			if(slider == tunaSlider){
				tuna = new Tuna((double) tunaSlider.getValue() / 100.0);
				ingreList.add(tuna);
			}
		}
		return slider;
	}

	public JComboBox<String> getPlateComboBox(JComboBox<String> box){
		if(box.getSelectedItem().toString().equals("Red Plate")){
			try {
				Plate plate = new RedPlate(roll);
				publishPlateToListeners(plate);
			} catch (PlatePriceException e1) {
				System.out.println(e1);
			}
		}
		if(box.getSelectedItem().toString().equals("Green Plate")){
			try {
				Plate plate = new GreenPlate(roll);
				publishPlateToListeners(plate);
			} catch (PlatePriceException e1) {
				System.out.println(e1);
			}
		}
		if(box.getSelectedItem().toString().equals("Blue Plate")){
			try {
				Plate plate = new BluePlate(roll);
				publishPlateToListeners(plate);
			} catch (PlatePriceException e1) {
				System.out.println(e1);
			}
		}
		if(box.getSelectedItem().toString().equals("Gold Plate")){
			try {
				Plate plate = new GoldPlate(roll, goldAmount.getValue());
				publishPlateToListeners(plate);
			} catch (PlatePriceException e1) {
				System.out.println(e1);
			}
		}
		return box;
	}

	public Sashimi getSashimi(JComboBox<String> s, ActionEvent e){
		if(e.getSource() == sashimiButton){
			if(sashimiType.getSelectedItem().toString().equals("Crab")){
				sashimi = new Sashimi(Sashimi.SashimiType.CRAB);
			}
			if(sashimiType.getSelectedItem().toString().equals("Eel")){
				sashimi = new Sashimi(Sashimi.SashimiType.EEL);
			}
			if(sashimiType.getSelectedItem().toString().equals("Salmon")){
				sashimi = new Sashimi(Sashimi.SashimiType.SALMON);
			}
			if(sashimiType.getSelectedItem().toString().equals("Shrimp")){
				sashimi = new Sashimi(Sashimi.SashimiType.SHRIMP);
			}
			if(sashimiType.getSelectedItem().toString().equals("Tuna")){
				sashimi = new Sashimi(Sashimi.SashimiType.TUNA);
			}
			return sashimi;
		}
		return sashimi;
	}

	public Nigiri getNigiri(JComboBox<String> s, ActionEvent e){
		if(e.getSource() == nigiriButton){
			if(nigiriType.getSelectedItem().toString().equals("Crab")){
				nigiri = new Nigiri(Nigiri.NigiriType.CRAB);
			}
			if(nigiriType.getSelectedItem().toString().equals("Eel")){
				nigiri = new Nigiri(Nigiri.NigiriType.EEL);
			}
			if(nigiriType.getSelectedItem().toString().equals("Salmon")){
				nigiri = new Nigiri(Nigiri.NigiriType.SALMON);
			}
			if(nigiriType.getSelectedItem().toString().equals("Shrimp")){
				nigiri = new Nigiri(Nigiri.NigiriType.SHRIMP);
			}
			if(nigiriType.getSelectedItem().toString().equals("Tuna")){
				nigiri = new Nigiri(Nigiri.NigiriType.TUNA);
			}
		}
		return nigiri;
	}

	public JComboBox<String> getButton(JComboBox<String> s, ActionEvent e) {
		if(e.getSource() == sashimiButton){
			if(coloredPlates.getSelectedItem().toString().equals("Red Plate")){
				sashimi = getSashimi(sashimiType, e);
				try {
					Plate plate = new RedPlate(sashimi);
					publishPlateToListeners(plate);
				} catch (PlatePriceException e1) {
					System.out.println(e1);
				}
			}
			if(coloredPlates.getSelectedItem().toString().equals("Green Plate")){
				sashimi = getSashimi(sashimiType, e);
				try {
					Plate plate = new GreenPlate(sashimi);
					publishPlateToListeners(plate);
				} catch (PlatePriceException e1) {
					System.out.println(e1);
				}
			}
			if(coloredPlates.getSelectedItem().toString().equals("Blue Plate")){
				sashimi = getSashimi(sashimiType, e);
				try {
					Plate plate = new BluePlate(sashimi);
					publishPlateToListeners(plate);
				} catch (PlatePriceException e1) {
					System.out.println(e1);
				}
			}
			if(coloredPlates.getSelectedItem().toString().equals("Gold Plate")){
				sashimi = getSashimi(sashimiType, e);
				try {
					Plate plate = new GoldPlate(sashimi, goldAmount.getValue());
					publishPlateToListeners(plate);
				} catch (PlatePriceException e1) {
					System.out.println(e1);
				}
			}
		}
		if(e.getSource() == nigiriButton){
			if(coloredPlates.getSelectedItem().toString().equals("Red Plate")){
				nigiri = getNigiri(nigiriType, e);
				try {
					Plate plate = new RedPlate(nigiri);
					publishPlateToListeners(plate);
				} catch (PlatePriceException e1) {
					System.out.println(e1);
				}
			}
			if(coloredPlates.getSelectedItem().toString().equals("Green Plate")){
				nigiri = getNigiri(nigiriType, e);
				try {
					Plate plate = new GreenPlate(nigiri);
					publishPlateToListeners(plate);
				} catch (PlatePriceException e1) {
					System.out.println(e1);
				}
			}
			if(coloredPlates.getSelectedItem().toString().equals("Blue Plate")){
				nigiri = getNigiri(nigiriType, e);
				try {
					Plate plate = new BluePlate(nigiri);
					publishPlateToListeners(plate);
				} catch (PlatePriceException e1) {
					System.out.println(e1);
				}
			}
			if(coloredPlates.getSelectedItem().toString().equals("Gold Plate")){
				nigiri = getNigiri(nigiriType, e);
				try {
					Plate plate = new GoldPlate(nigiri, goldAmount.getValue());
					publishPlateToListeners(plate);
				} catch (PlatePriceException e1) {
					System.out.println(e1);
				}
			}
		}
		return s;
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		ingreList = new ArrayList<Ingredient>();
		avocadoSlider = getSliderValue(avocadoSlider);
		crabSlider = getSliderValue(crabSlider);
		eelSlider = getSliderValue(eelSlider);
		riceSlider = getSliderValue(riceSlider);
		salmonSlider = getSliderValue(salmonSlider);
		shrimpSlider = getSliderValue(shrimpSlider);
		tunaSlider = getSliderValue(tunaSlider);

		Ingredient[] ingredient = new Ingredient[ingreList.size()];
		ingredient = ingreList.toArray(ingredient);	
		roll = new Roll(ingredient);

		if(e.getSource() == makeRoll){
			coloredPlates = getPlateComboBox(coloredPlates);
		}
		if(e.getSource() == sashimiButton){
			sashimiType = getButton(sashimiType, e);
		}
		if(e.getSource() == nigiriButton){
			nigiriType = getButton(nigiriType, e);
		}
	}
}
